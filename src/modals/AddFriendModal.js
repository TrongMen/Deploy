import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import '../styles/AddFriendModal.css';
import { FaChevronDown, FaUserFriends, FaSpinner } from 'react-icons/fa';

const AddFriendModal = ({ isOpen, onClose, currentLoggedInUserId }) => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [searchResultUser, setSearchResultUser] = useState(null); // S·∫Ω ch·ª©a { ...user, hasPendingSentRequest: boolean }
  const [isLoading, setIsLoading] = useState(false);
  const [searchError, setSearchError] = useState('');
  const [actionMessage, setActionMessage] = useState(''); // D√πng chung cho c√°c th√¥ng b√°o h√†nh ƒë·ªông

  if (!isOpen) return null;

  const handleSearch = async () => {
    if (!phoneNumber.trim()) {
      setSearchError('Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i.');
      setSearchResultUser(null);
      return;
    }
    setIsLoading(true);
    setSearchError('');
    setSearchResultUser(null);
    setActionMessage('');

    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/user/findUserByPhoneWeb`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ phoneNumber: phoneNumber }),
      });

      const data = await response.json();

      if (response.ok && data.user) {
        // Kh·ªüi t·∫°o tr·∫°ng th√°i l·ªùi m·ªùi cho ng∆∞·ªùi d√πng t√¨m ƒë∆∞·ª£c
        // API findUserByPhoneWeb kh√¥ng tr·∫£ v·ªÅ tr·∫°ng th√°i n√†y, n√™n ta m·∫∑c ƒë·ªãnh l√† ch∆∞a g·ª≠i
        setSearchResultUser({ ...data.user, hasPendingSentRequest: false });
      } else {
        setSearchResultUser(null);
        setSearchError(data.message || 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c c√≥ l·ªói x·∫£y ra.');
      }
    } catch (error) {
      console.error('L·ªói t√¨m ki·∫øm:', error);
      setSearchError('L·ªói k·∫øt n·ªëi m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSendFriendRequest = async (friendId) => {
    if (!currentLoggedInUserId) {
      setActionMessage('L·ªói: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng hi·ªán t·∫°i ƒë·ªÉ g·ª≠i l·ªùi m·ªùi.');
      console.error('currentLoggedInUserId is missing');
      return;
    }
    setActionMessage('ƒêang g·ª≠i l·ªùi m·ªùi...');
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/user/sendFriendRequestWeb`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: currentLoggedInUserId,
          friend_id: friendId,
        }),
      });
      const data = await response.json();
      if (response.ok) {
        setActionMessage(data.message || 'ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n!');
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng trong k·∫øt qu·∫£ t√¨m ki·∫øm
        setSearchResultUser(prevUser => prevUser ? { ...prevUser, hasPendingSentRequest: true } : null);
      } else {
        setActionMessage(data.message || 'Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('L·ªói g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n:', error);
      setActionMessage('L·ªói k·∫øt n·ªëi khi g·ª≠i l·ªùi m·ªùi.');
    }
  };

  const handleCancelFriendRequest = async (friendId) => {
    if (!currentLoggedInUserId) {
      setActionMessage('L·ªói: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng hi·ªán t·∫°i.');
      return;
    }
    setActionMessage('ƒêang h·ªßy l·ªùi m·ªùi...');
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/user/cancelFriendRequestWeb`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: currentLoggedInUserId, // ID ng∆∞·ªùi g·ª≠i (ng∆∞·ªùi h·ªßy)
          friend_id: friendId,          // ID ng∆∞·ªùi ƒë√£ ƒë∆∞·ª£c g·ª≠i (nay b·ªã h·ªßy)
        }),
      });
      const data = await response.json();
      if (response.ok) {
        setActionMessage(data.message || 'ƒê√£ h·ªßy l·ªùi m·ªùi k·∫øt b·∫°n!');
        setSearchResultUser(prevUser => prevUser ? { ...prevUser, hasPendingSentRequest: false } : null);
      } else {
        setActionMessage(data.message || 'Kh√¥ng th·ªÉ h·ªßy l·ªùi m·ªùi. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('L·ªói h·ªßy l·ªùi m·ªùi k·∫øt b·∫°n:', error);
      setActionMessage('L·ªói k·∫øt n·ªëi khi h·ªßy l·ªùi m·ªùi.');
    }
  };

  const resetModalState = () => {
    setPhoneNumber('');
    setSearchResultUser(null);
    setSearchError('');
    setActionMessage('');
    setIsLoading(false);
  };

  const handleClose = () => {
    resetModalState();
    onClose();
  };

  const modalContent = (
    <div className="add-friend-modal-overlay" onClick={handleClose}>
      <div className="add-friend-modal-content" onClick={e => e.stopPropagation()}>
        <div className="add-friend-modal-header">
          <h2>Th√™m b·∫°n</h2>
          <button className="modal-close-btn" onClick={handleClose}>‚úï</button>
        </div>
        <div className="add-friend-modal-body">
          <div className="phone-input-section">
            <div className="country-code-selector">
              <span className="country-flag">üáªüá≥</span>
              <span>(+84)</span>
              <FaChevronDown className="dropdown-arrow" />
            </div>
            <input
              type="tel"
              className="phone-input"
              placeholder="S·ªë ƒëi·ªán tho·∫°i"
              value={phoneNumber}
              onChange={(e) => {
                setPhoneNumber(e.target.value);
                setSearchResultUser(null); // X√≥a k·∫øt qu·∫£ c≈© khi SƒêT thay ƒë·ªïi
                setSearchError('');
                setActionMessage('');
              }}
            />
          </div>

          {isLoading && (
            <div className="search-loading">
              <FaSpinner className="spinner-icon" /> ƒêang t√¨m ki·∫øm...
            </div>
          )}
          {searchError && <div className="search-error-message">{searchError}</div>}
          {actionMessage && <div className="add-friend-message">{actionMessage}</div>}

          {searchResultUser && (
            <div className="search-result-section">
              <h4>K·∫øt qu·∫£ t√¨m ki·∫øm:</h4>
              <div className="suggested-friend-item">
                <div className="suggested-friend-avatar">
                  {searchResultUser.avatar ? (
                    <img src={searchResultUser.avatar} alt={searchResultUser.userName} />
                  ) : (
                    searchResultUser.userName?.substring(0, 2).toUpperCase()
                  )}
                </div>
                <div className="suggested-friend-info">
                  <span className="suggested-friend-name">{searchResultUser.userName}</span>
                </div>
                <button
                  className={`add-friend-btn-item ${searchResultUser.hasPendingSentRequest ? 'cancel-request-btn' : ''}`}
                  onClick={() => searchResultUser.hasPendingSentRequest 
                                ? handleCancelFriendRequest(searchResultUser._id) 
                                : handleSendFriendRequest(searchResultUser._id)
                          }
                >
                  {searchResultUser.hasPendingSentRequest ? 'H·ªßy l·ªùi m·ªùi' : 'K·∫øt b·∫°n'}
                </button>
              </div>
            </div>
          )}
        </div>
        <div className="add-friend-modal-footer">
          <button className="cancel-btn-modal" onClick={handleClose}>H·ªßy</button>
          <button className="search-btn-modal" onClick={handleSearch} disabled={isLoading}>
            {isLoading ? 'ƒêang t√¨m...' : 'T√¨m ki·∫øm'}
          </button>
        </div>
      </div>
    </div>
  );

  return ReactDOM.createPortal(
    modalContent,
    document.getElementById('modal-root')
  );
};

export default AddFriendModal;